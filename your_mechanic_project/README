We had a fantastic time meeting with you at the Career Fair and would like to move you to the next steps in the interview process, which would be our coding exercise. Please see below:

We are looking for a program that manages disjointed intervals of integers. E.g.: [[1, 3], [4, 6]] is a valid object gives two intervals. [[1, 3], [3, 6]] is not a valid object because it is not disjoint. [[1, 6]] is the intended result.

Empty array [] means no interval, it is the default/start state.

We want you to implement a program that read the inputs from a file and outputs them to another file. These files would be specified as command line parameters in the following format:

./executable input_file.csv output_file.txt

The input file would be a CSV in the following format:

action, start of interval, end of interval

Here is an example sequence in an input file:
add, 1, 5
remove, 2, 3
add, 6, 8
remove, 4, 7
add, 2, 7

The output file would contain the state of the intervals at each step of the sequence. Assume that the output array is initially []. The following is the expected content of the output file for the above example input sequence.

[[1, 5]]
[[1, 2], [3, 5]]
[[1, 2], [3, 5], [6, 8]]
[[1, 2], [3, 4], [7, 8]]
[[1, 8]]

This is not a very simple problem, please take your time and try to get the code bug free if you can. There is no time requirement, and you can use any programming language.

To give you some context of a practical application for such a solution, you may imagine it being used to define mechanic’s availability for a day. A key responsibility of the Engineering team here at YourMechanic is ensuring timely matching of mechanic availability to customer demand for a service and the mechanic’s calendar is an integral part of that process.

As an example, these intervals could be thought of as representing ranges of time within a day, in terms of the number of minutes from midnight.  E.g: the interval array: [[0, 62], [150, 180]] would represent the ranges of 12:00 AM to 1:02 AM and 2:30 AM to 3:00 AM. The add/remove functions can be thought of as adding or removing available time from the day’s schedule.  E.g: remove(420, 480) implies that the entire period from 7:00 AM to 8:00 AM is now unavailable on the schedule.

While the mechanic calendar is one application of the algorithm, it may not be the only one. Please consider the above illustration only as one example among many.

Deliverables:

Please provide the following once you’re done with the implementation:
1) Source code
2) Compiled executable, if applicable
3)Any test input files that you have used to test your code

Please don't hesitate to reach out to us if you have any questions! We look forward to hearing from you and moving into next steps!

Thanks,

Rajat Agarwal
Dir. Engineering
import csv
with open('file.csv','r') as csvfile:
    schedule  = csv.reader(csvfile, delimiter=',')
    for row in schedule:
        print row


#Create a node linkedlist
#node must have
#          hour element
#          next node
#          connected element if element says connected then its continous,
#          otherwise next element should be put in a new array
#class Time(object):
# 
#    def __init__(self, time_slot, connected, prev, next):
#        self.time_slot = time_slot
#        self.connected = connected
#        self.prev = prev

# Here is an example sequence in an input file:
# add, 1, 5
# remove, 2, 3
# add, 6, 8
# remove, 4, 7
# add, 2, 7
# 
# The output file would contain the state of the intervals at each step of the sequence. Assume that the output array is initially []. The following is the expected content of the output file for the above example input sequence.
# 
# [[1, 5]]
# [[1, 2], [3, 5]]
# [[1, 2], [3, 5], [6, 8]]
# [[1, 2], [3, 4], [7, 8]]
# [[1, 8]]


#
#If the operation is add then for each element within range initialize and 
#1. add  a new node, if the starting point is higher than the last element in the list
#2. Otherwise if it already exists then ignore
#3. If doesnt exist already then check connected if 0, then add and change, otherwise just add 


#Remove operation
#1. Remove [a,b] causes a.connected = 0 if a,exists until b - 1
#2. If a,b doesnt exist then no ops.

# coding: utf-8

# We are looking for a program that manages disjointed intervals of integers. E.g.: [[1, 3], [4, 6]] is a valid object gives two intervals. [[1, 3], [3, 6]] is not a valid object because it is not disjoint. [[1, 6]] is the intended result.
# 
# Empty array [] means no interval, it is the default/start state.
# 
# We want you to implement a program that read the inputs from a file and outputs them to another file. These files would be specified as command line parameters in the following format:
# 
# ./executable input_file.csv output_file.txt
# 
# The input file would be a CSV in the following format:
# 
# action, start of interval, end of interval
# 
# Here is an example sequence in an input file:
# add, 1, 5
# remove, 2, 3
# add, 6, 8
# remove, 4, 7
# add, 2, 7
# 
# The output file would contain the state of the intervals at each step of the sequence. Assume that the output array is initially []. The following is the expected content of the output file for the above example input sequence.
# 
# [[1, 5]]
# [[1, 2], [3, 5]]
# [[1, 2], [3, 5], [6, 8]]
# [[1, 2], [3, 4], [7, 8]]
# [[1, 8]]
# 
# This is not a very simple problem, please take your time and try to get the code bug free if you can. There is no time requirement, and you can use any programming language.
# 
# To give you some context of a practical application for such a solution, you may imagine it being used to define mechanic’s availability for a day. A key responsibility of the Engineering team here at YourMechanic is ensuring timely matching of mechanic availability to customer demand for a service and the mechanic’s calendar is an integral part of that process.
# 
# As an example, these intervals could be thought of as representing ranges of time within a day, in terms of the number of minutes from midnight.  E.g: the interval array: [[0, 62], [150, 180]] would represent the ranges of 12:00 AM to 1:02 AM and 2:30 AM to 3:00 AM. The add/remove functions can be thought of as adding or removing available time from the day’s schedule.  E.g: remove(420, 480) implies that the entire period from 7:00 AM to 8:00 AM is now unavailable on the schedule.
# 
# While the mechanic calendar is one application of the algorithm, it may not be the only one. Please consider the above illustration only as one example among many.
# 
# Deliverables:
# 
# Please provide the following once you’re done with the implementation:
# 1) Source code
# 2) Compiled executable, if applicable
# 3)Any test input files that you have used to test your code
# 

# In[76]:


